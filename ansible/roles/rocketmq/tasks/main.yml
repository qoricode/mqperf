---
- set_fact: rocketmq_name_server="{{ groups['rocketmq'][0] }}"
- set_fact: rocketmq_broker_master_1="{{ groups['rocketmq'][1] }}"
- set_fact: rocketmq_broker_slave_1="{{ groups['rocketmq'][2] }}"
- set_fact: rocketmq_broker_master_2="{{ groups['rocketmq'][3] }}"
- set_fact: rocketmq_broker_slave_2="{{ groups['rocketmq'][4] }}"
- set_fact: rocketmq_broker_master_3="{{ groups['rocketmq'][5] }}"
- set_fact: rocketmq_broker_slave_3="{{ groups['rocketmq'][6] }}"

- set_fact: rocketmq_name_server_private_ip="{{ hostvars[rocketmq_name_server].private_ip_address }}"

- name: Remove Java 7
  yum:
    name: java-1.7.0-openjdk
    state: absent
  become: true
  
- name: Install Java 8
  yum:
    name: java-1.8.0-openjdk-devel.x86_64
    state: present
  become: true

- name: Set JAVA_HOME
  lineinfile: 
    dest: /etc/environment 
    state: present 
    regexp: '^JAVA_HOME'
    line: 'JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk'

- name: Link java
  file:
    state: link
    src: /usr/lib/jvm/java-1.8.0-openjdk
    dest: /usr/java

- name: Ensure fs exists on data device (if provided)
  filesystem:
    fstype: "{{ storage_fs_type }}"
    dev: "{{ storage_device }}"

- name: Ensure mount point exists
  file:
    state: directory
    path: "/opt/rocketmq"

- name: Ensure data direcory is mounted
  mount:
    path: "/opt/rocketmq"
    src: "{{ storage_device }}"
    fstype: "{{ storage_fs_type }}"
    state: mounted

- name: Download RocketMQ
  unarchive:
    src: "{{rocketmq_download_url}}"
    dest: /opt
    remote_src: yes

- name: Create convenient link
  copy:
    src: /opt/rocketmq-all-{{ rocketmq_version }}-bin-release/
    dest: /opt/rocketmq/
    remote_src: yes
    directory_mode: yes

# it's easier to create symlinks than to configure different log/store directories
- name: Create logs directory
  file:
    path: /opt/rocketmq/logs
    state: directory

- name: Create logs directory
  file:
    path: /opt/rocketmq/store
    state: directory

- name: Create root logs directory
  file:
    path: /root/logs
    state: directory

- name: Link logs
  file:
    state: link
    src: /opt/rocketmq/logs
    dest: /root/logs/rocketmqlogs

- name: Link store
  file:
    state: link
    src: /opt/rocketmq/store
    dest: /root/store

- name: Setting Environment
  shell: |
    echo 'export PATH="$PATH:{{ rocketmq_dir }}/bin"' >> /etc/profile
    echo 'export NAMESRV_ADDR={{ rocketmq_name_server_private_ip }}:9876'

- name: Configuration RocketMQ Name Server
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: mqnamesrv.service
    dest: /lib/systemd/system/
  with_items:
    - "{{ rocketmq_name_server }}"

- name: Reload daemon service on nameserver
  run_once: true
  delegate_to: "{{ item }}"
  shell: systemctl daemon-reload
  with_items:
    - "{{ rocketmq_name_server }}"

- name: Start RocketMQ Name Server
  run_once: true
  delegate_to: "{{ item }}"
  service:
    name: mqnamesrv
    state: started
    enabled: yes
  with_items:
    - "{{ rocketmq_name_server }}"

- name: Wait for mqnameserver to start
  wait_for: 
    host: "{{ item }}"
    port: "{{ rocketmq_name_server_port }}"
    delay: 10
    timeout: 640
    state: started
  with_items: 
    - "{{ rocketmq_name_server }}"
    
- name: Copy master_1.properties to master
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: master_1.properties
    dest: /opt/rocketmq/master.properties
  with_items:
    - "{{ rocketmq_broker_master_1 }}"

- name: Copy master_2.properties to master
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: master_2.properties
    dest: /opt/rocketmq/master.properties
  with_items:
    - "{{ rocketmq_broker_master_2 }}"

- name: Copy master_3.properties to master
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: master_3.properties
    dest: /opt/rocketmq/master.properties
  with_items:
    - "{{ rocketmq_broker_master_3 }}"

- name: Configuration master RocketMQ Broker Server
  run_once: true
  delegate_to: "{{ item }}"
  template:
    src: mqbroker-master.service.j2
    dest: /lib/systemd/system/mqbroker.service
  with_items:
    - "{{ rocketmq_broker_master_1 }}"
    - "{{ rocketmq_broker_master_2 }}"
    - "{{ rocketmq_broker_master_3 }}"

- name: Reload daemon service on master
  run_once: true
  delegate_to: "{{ item }}"
  shell: systemctl daemon-reload
  with_items:
    - "{{ rocketmq_broker_master_1 }}"
    - "{{ rocketmq_broker_master_2 }}"
    - "{{ rocketmq_broker_master_3 }}"

- name: Start master RocketMQ Broker Server
  run_once: true
  delegate_to: "{{ item }}"
  service:
    name: mqbroker
    state: started
    enabled: yes
  with_items:
    - "{{ rocketmq_broker_master_1 }}"
    - "{{ rocketmq_broker_master_2 }}"
    - "{{ rocketmq_broker_master_3 }}"

- name: Wait for master mqbroker to start
  wait_for:
    host: "{{ item }}"
    port: "{{ rocketmq_broker_port_main }}"
    delay: 10
    timeout: 640
    state: started
  with_items:
    - "{{ rocketmq_broker_master_1 }}"
    - "{{ rocketmq_broker_master_2 }}"
    - "{{ rocketmq_broker_master_3 }}"

- name: Copy slave.properties to slave 1
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: slave_1.properties
    dest: /opt/rocketmq/slave.properties
  with_items:
    - "{{ rocketmq_broker_slave_1 }}"

- name: Copy slave.properties to slave 2
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: slave_2.properties
    dest: /opt/rocketmq/slave.properties
  with_items:
    - "{{ rocketmq_broker_slave_2 }}"

- name: Copy slave.properties to slave 3
  run_once: true
  delegate_to: "{{ item }}"
  copy:
    src: slave_3.properties
    dest: /opt/rocketmq/slave.properties
  with_items:
    - "{{ rocketmq_broker_slave_3 }}"

- name: Configuration slaves RocketMQ Broker Server
  run_once: true
  delegate_to: "{{ item }}"
  template:
    src: mqbroker-slave.service.j2
    dest: /lib/systemd/system/mqbroker.service
  with_items:
    - "{{ rocketmq_broker_slave_1 }}"
    - "{{ rocketmq_broker_slave_2 }}"
    - "{{ rocketmq_broker_slave_3 }}"

- name: Reload daemon service on slaves
  run_once: true
  delegate_to: "{{ item }}"
  shell: systemctl daemon-reload
  with_items:
    - "{{ rocketmq_broker_slave_1 }}"
    - "{{ rocketmq_broker_slave_2 }}"
    - "{{ rocketmq_broker_slave_3 }}"

- name: Start slaves
  run_once: true
  delegate_to: "{{ item }}"
  service:
    name: mqbroker
    state: started
    enabled: yes
  with_items:
    - "{{ rocketmq_broker_slave_1 }}"
    - "{{ rocketmq_broker_slave_2 }}"
    - "{{ rocketmq_broker_slave_3 }}"

- name: Wait for slaves broker to start
  wait_for:
    host: "{{ item }}"
    port: "{{ rocketmq_broker_port_main }}"
    delay: 10
    timeout: 640
    state: started
  with_items:
    - "{{ rocketmq_broker_slave_1 }}"
    - "{{ rocketmq_broker_slave_2 }}"
    - "{{ rocketmq_broker_slave_3 }}"
